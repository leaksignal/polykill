/* tslint:disable */
/* eslint-disable */
/**
 * LeakSignal LeakScanner
 * API for LeakSignal LeakScanner
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: max@leaksignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BillingDetails200Response,
  EnterPayment200Response,
  EnterPaymentRequest,
  HealthCheck200Response,
  Login200Response,
  Logout200Response,
  OidcFetch200Response,
  RiskAssessment200Response,
  RiskAssessmentRequest,
  UserDetails,
  Website,
  WebsiteCreateRequest,
  WebsiteScan,
} from '../models/index';
import {
    BillingDetails200ResponseFromJSON,
    BillingDetails200ResponseToJSON,
    EnterPayment200ResponseFromJSON,
    EnterPayment200ResponseToJSON,
    EnterPaymentRequestFromJSON,
    EnterPaymentRequestToJSON,
    HealthCheck200ResponseFromJSON,
    HealthCheck200ResponseToJSON,
    Login200ResponseFromJSON,
    Login200ResponseToJSON,
    Logout200ResponseFromJSON,
    Logout200ResponseToJSON,
    OidcFetch200ResponseFromJSON,
    OidcFetch200ResponseToJSON,
    RiskAssessment200ResponseFromJSON,
    RiskAssessment200ResponseToJSON,
    RiskAssessmentRequestFromJSON,
    RiskAssessmentRequestToJSON,
    UserDetailsFromJSON,
    UserDetailsToJSON,
    WebsiteFromJSON,
    WebsiteToJSON,
    WebsiteCreateRequestFromJSON,
    WebsiteCreateRequestToJSON,
    WebsiteScanFromJSON,
    WebsiteScanToJSON,
} from '../models/index';

export interface EnterPaymentOperationRequest {
    enterPaymentRequest?: EnterPaymentRequest;
}

export interface LoginRequest {
    code: string;
    redirectOrigin?: string;
}

export interface OidcFetchRequest {
    redirectOrigin?: string;
}

export interface RiskAssessmentOperationRequest {
    riskAssessmentRequest?: RiskAssessmentRequest;
}

export interface WebsiteCreateOperationRequest {
    websiteCreateRequest?: WebsiteCreateRequest;
}

export interface WebsiteDeleteRequest {
    websiteId: number;
}

export interface WebsiteGetRequest {
    websiteId: number;
}

export interface WebsiteScanGetRequest {
    websiteId: number;
    scanId: number;
}

export interface WebsiteScanListRequest {
    websiteId: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Generates a link to manage billing
     */
    async billingDetailsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingDetails200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/billing_details`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingDetails200ResponseFromJSON(jsonValue));
    }

    /**
     * Generates a link to manage billing
     */
    async billingDetails(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingDetails200Response> {
        const response = await this.billingDetailsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates an embedded subscription flow
     */
    async enterPaymentRaw(requestParameters: EnterPaymentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnterPayment200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/enter_payment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnterPaymentRequestToJSON(requestParameters.enterPaymentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnterPayment200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an embedded subscription flow
     */
    async enterPayment(requestParameters: EnterPaymentOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnterPayment200Response> {
        const response = await this.enterPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get signed in user details
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsFromJSON(jsonValue));
    }

    /**
     * Get signed in user details
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetails> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Runs a health check
     */
    async healthCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheck200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheck200ResponseFromJSON(jsonValue));
    }

    /**
     * Runs a health check
     */
    async healthCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheck200Response> {
        const response = await this.healthCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * OIDC Login
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Login200Response>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.redirectOrigin !== undefined) {
            queryParameters['redirect_origin'] = requestParameters.redirectOrigin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Login200ResponseFromJSON(jsonValue));
    }

    /**
     * OIDC Login
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Login200Response> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OIDC Logout
     */
    async logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Logout200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Logout200ResponseFromJSON(jsonValue));
    }

    /**
     * OIDC Logout
     */
    async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Logout200Response> {
        const response = await this.logoutRaw(initOverrides);
        return await response.value();
    }

    /**
     * OIDC Logout
     */
    async oidcFetchRaw(requestParameters: OidcFetchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcFetch200Response>> {
        const queryParameters: any = {};

        if (requestParameters.redirectOrigin !== undefined) {
            queryParameters['redirect_origin'] = requestParameters.redirectOrigin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/oidc`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OidcFetch200ResponseFromJSON(jsonValue));
    }

    /**
     * OIDC Logout
     */
    async oidcFetch(requestParameters: OidcFetchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcFetch200Response> {
        const response = await this.oidcFetchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Calculates risk assessment
     */
    async riskAssessmentRaw(requestParameters: RiskAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RiskAssessment200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/risk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RiskAssessmentRequestToJSON(requestParameters.riskAssessmentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RiskAssessment200ResponseFromJSON(jsonValue));
    }

    /**
     * Calculates risk assessment
     */
    async riskAssessment(requestParameters: RiskAssessmentOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RiskAssessment200Response> {
        const response = await this.riskAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a website
     */
    async websiteCreateRaw(requestParameters: WebsiteCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Website>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/website`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebsiteCreateRequestToJSON(requestParameters.websiteCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteFromJSON(jsonValue));
    }

    /**
     * Creates a website
     */
    async websiteCreate(requestParameters: WebsiteCreateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Website> {
        const response = await this.websiteCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Website Delete
     */
    async websiteDeleteRaw(requestParameters: WebsiteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.websiteId === null || requestParameters.websiteId === undefined) {
            throw new runtime.RequiredError('websiteId','Required parameter requestParameters.websiteId was null or undefined when calling websiteDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/website/{website_id}`.replace(`{${"website_id"}}`, encodeURIComponent(String(requestParameters.websiteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Website Delete
     */
    async websiteDelete(requestParameters: WebsiteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.websiteDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Website Get
     */
    async websiteGetRaw(requestParameters: WebsiteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Website>> {
        if (requestParameters.websiteId === null || requestParameters.websiteId === undefined) {
            throw new runtime.RequiredError('websiteId','Required parameter requestParameters.websiteId was null or undefined when calling websiteGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/website/{website_id}`.replace(`{${"website_id"}}`, encodeURIComponent(String(requestParameters.websiteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteFromJSON(jsonValue));
    }

    /**
     * Website Get
     */
    async websiteGet(requestParameters: WebsiteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Website> {
        const response = await this.websiteGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Website List
     */
    async websiteListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Website>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/website`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebsiteFromJSON));
    }

    /**
     * Website List
     */
    async websiteList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Website>> {
        const response = await this.websiteListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Website Scan Fetch, with scan results included
     */
    async websiteScanGetRaw(requestParameters: WebsiteScanGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebsiteScan>> {
        if (requestParameters.websiteId === null || requestParameters.websiteId === undefined) {
            throw new runtime.RequiredError('websiteId','Required parameter requestParameters.websiteId was null or undefined when calling websiteScanGet.');
        }

        if (requestParameters.scanId === null || requestParameters.scanId === undefined) {
            throw new runtime.RequiredError('scanId','Required parameter requestParameters.scanId was null or undefined when calling websiteScanGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/website/{website_id}/scans/{scan_id}`.replace(`{${"website_id"}}`, encodeURIComponent(String(requestParameters.websiteId))).replace(`{${"scan_id"}}`, encodeURIComponent(String(requestParameters.scanId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteScanFromJSON(jsonValue));
    }

    /**
     * Website Scan Fetch, with scan results included
     */
    async websiteScanGet(requestParameters: WebsiteScanGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebsiteScan> {
        const response = await this.websiteScanGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Website Scan List, no scan results included
     */
    async websiteScanListRaw(requestParameters: WebsiteScanListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WebsiteScan>>> {
        if (requestParameters.websiteId === null || requestParameters.websiteId === undefined) {
            throw new runtime.RequiredError('websiteId','Required parameter requestParameters.websiteId was null or undefined when calling websiteScanList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/website/{website_id}/scans`.replace(`{${"website_id"}}`, encodeURIComponent(String(requestParameters.websiteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebsiteScanFromJSON));
    }

    /**
     * Website Scan List, no scan results included
     */
    async websiteScanList(requestParameters: WebsiteScanListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WebsiteScan>> {
        const response = await this.websiteScanListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
